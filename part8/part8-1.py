'''
다이나믹 프로그래밍(DP, 동적 계획법)
- 한 번 계산된 문제의 결과를 메모리에 저장하여 중복을 줄이는 기법
- 시간 복잡도를 획기적으로 줄일 수 있음
- 탑다운(하향식, 메모이제이션)/바텀업(상향식) 방식이 있음
- 동적 할당과는 관계 X
- 그리디, 구현, 완전 탐색 방식으로 해결할 수 없는 경우 DP를 고려
    -> 일단 비효율적인 재귀 함수로 구현 후, DP를 이용하여 코드 개선 가능
- 다음 2가지 조건을 만족하는 경우 사용 가능
1. 최적 부분 구조
- 큰 문제를 작은 문제로 나눌 수 있음
- 작은 문제의 답을 모아 큰 문제를 해결할 수 있음
2. 중복되는 부분 문제
- 동일한 작은 문제를 반복적으로 해결

ex) 피보나치 수열
- a(n) = a(n - 1) + a(n - 2), a(1) = a(2) = 1

메모이제이션(캐싱)
- 하향식 다이나믹 프로그래밍 기법
- 한 번 계산한 결과를 메모리 공간에 메모하는 기법
'''
d = [0] * 100
def fibo(n):
    if n in [1, 2]:
        return 1
    if d[n] == 0:
        d[n] = fibo(n - 1) + fibo(n - 2)
    return d[n]

print(fibo(99))
